/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IItemExchange {
  export type ItemExchangeValidationResultStruct = {
    checkEnabled: boolean;
    checkConditionCharacter: boolean;
    checkExecutableTimes: boolean;
    checkExecutableTimesPerCharacter: boolean;
    checkEndPeriod: boolean;
    checkCharacterExecutableInterval: boolean;
    checkConditionEquipments: boolean[];
    checkConditionItemCounts: BigNumberish[];
    checkCostItemCounts: BigNumberish[];
  };

  export type ItemExchangeValidationResultStructOutput = [
    checkEnabled: boolean,
    checkConditionCharacter: boolean,
    checkExecutableTimes: boolean,
    checkExecutableTimesPerCharacter: boolean,
    checkEndPeriod: boolean,
    checkCharacterExecutableInterval: boolean,
    checkConditionEquipments: boolean[],
    checkConditionItemCounts: bigint[],
    checkCostItemCounts: bigint[]
  ] & {
    checkEnabled: boolean;
    checkConditionCharacter: boolean;
    checkExecutableTimes: boolean;
    checkExecutableTimesPerCharacter: boolean;
    checkEndPeriod: boolean;
    checkCharacterExecutableInterval: boolean;
    checkConditionEquipments: boolean[];
    checkConditionItemCounts: bigint[];
    checkCostItemCounts: bigint[];
  };
}

export interface IItemExchangeInterface extends Interface {
  getFunction(nameOrSignature: "exchange" | "validate"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Exchange"): EventFragment;

  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
}

export namespace ExchangeEvent {
  export type InputTuple = [
    worldId: BigNumberish,
    tokenId: BigNumberish,
    exchangeDefinitionId: BigNumberish
  ];
  export type OutputTuple = [
    worldId: bigint,
    tokenId: bigint,
    exchangeDefinitionId: bigint
  ];
  export interface OutputObject {
    worldId: bigint;
    tokenId: bigint;
    exchangeDefinitionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IItemExchange extends BaseContract {
  connect(runner?: ContractRunner | null): IItemExchange;
  waitForDeployment(): Promise<this>;

  interface: IItemExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  exchange: TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      exchangeDefinitionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  validate: TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      exchangeDefinitionId: BigNumberish
    ],
    [IItemExchange.ItemExchangeValidationResultStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "exchange"
  ): TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      exchangeDefinitionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validate"
  ): TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      exchangeDefinitionId: BigNumberish
    ],
    [IItemExchange.ItemExchangeValidationResultStructOutput],
    "view"
  >;

  getEvent(
    key: "Exchange"
  ): TypedContractEvent<
    ExchangeEvent.InputTuple,
    ExchangeEvent.OutputTuple,
    ExchangeEvent.OutputObject
  >;

  filters: {
    "Exchange(uint256,uint256,uint256)": TypedContractEvent<
      ExchangeEvent.InputTuple,
      ExchangeEvent.OutputTuple,
      ExchangeEvent.OutputObject
    >;
    Exchange: TypedContractEvent<
      ExchangeEvent.InputTuple,
      ExchangeEvent.OutputTuple,
      ExchangeEvent.OutputObject
    >;
  };
}
