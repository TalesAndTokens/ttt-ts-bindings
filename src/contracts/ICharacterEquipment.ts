/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ICharacterEquipment {
  export type EquipValidationResultStruct = {
    validWorldId: boolean;
    validTokenId: boolean;
    validItemDefinitionIdLength: boolean;
    validSlots: boolean[];
    validItemDefinitionIds: boolean[];
    equipableItems: boolean[];
    validItemCounts: boolean[];
  };

  export type EquipValidationResultStructOutput = [
    validWorldId: boolean,
    validTokenId: boolean,
    validItemDefinitionIdLength: boolean,
    validSlots: boolean[],
    validItemDefinitionIds: boolean[],
    equipableItems: boolean[],
    validItemCounts: boolean[]
  ] & {
    validWorldId: boolean;
    validTokenId: boolean;
    validItemDefinitionIdLength: boolean;
    validSlots: boolean[];
    validItemDefinitionIds: boolean[];
    equipableItems: boolean[];
    validItemCounts: boolean[];
  };
}

export interface ICharacterEquipmentInterface extends Interface {
  getFunction(
    nameOrSignature: "equip" | "getEquipments" | "validateEquip"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Equip"): EventFragment;

  encodeFunctionData(
    functionFragment: "equip",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEquipments",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateEquip",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "equip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEquipments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateEquip",
    data: BytesLike
  ): Result;
}

export namespace EquipEvent {
  export type InputTuple = [
    worldId: BigNumberish,
    tokenId: BigNumberish,
    itemIds: BigNumberish[]
  ];
  export type OutputTuple = [
    worldId: bigint,
    tokenId: bigint,
    itemIds: bigint[]
  ];
  export interface OutputObject {
    worldId: bigint;
    tokenId: bigint;
    itemIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICharacterEquipment extends BaseContract {
  connect(runner?: ContractRunner | null): ICharacterEquipment;
  waitForDeployment(): Promise<this>;

  interface: ICharacterEquipmentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  equip: TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      itemDefinitionIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getEquipments: TypedContractMethod<
    [worldId: BigNumberish, tokenId: BigNumberish],
    [bigint[]],
    "view"
  >;

  validateEquip: TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      itemDefinitionIds: BigNumberish[]
    ],
    [ICharacterEquipment.EquipValidationResultStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "equip"
  ): TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      itemDefinitionIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEquipments"
  ): TypedContractMethod<
    [worldId: BigNumberish, tokenId: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateEquip"
  ): TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      itemDefinitionIds: BigNumberish[]
    ],
    [ICharacterEquipment.EquipValidationResultStructOutput],
    "view"
  >;

  getEvent(
    key: "Equip"
  ): TypedContractEvent<
    EquipEvent.InputTuple,
    EquipEvent.OutputTuple,
    EquipEvent.OutputObject
  >;

  filters: {
    "Equip(uint256,uint256,uint256[])": TypedContractEvent<
      EquipEvent.InputTuple,
      EquipEvent.OutputTuple,
      EquipEvent.OutputObject
    >;
    Equip: TypedContractEvent<
      EquipEvent.InputTuple,
      EquipEvent.OutputTuple,
      EquipEvent.OutputObject
    >;
  };
}
