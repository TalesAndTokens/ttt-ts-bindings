/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IGameAccessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getGameAdminAddresses"
      | "getInterfaceAddress"
      | "getInterfaceAddresses"
      | "getItemPackNFTAddresses"
      | "getTokenOwnerAddress"
      | "getWorldAdminAddresses"
      | "getWorldOwnerAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getGameAdminAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterfaceAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterfaceAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItemPackNFTAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOwnerAddress",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldAdminAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldOwnerAddresses",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGameAdminAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterfaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterfaceAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemPackNFTAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorldAdminAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorldOwnerAddresses",
    data: BytesLike
  ): Result;
}

export interface IGameAccess extends BaseContract {
  connect(runner?: ContractRunner | null): IGameAccess;
  waitForDeployment(): Promise<this>;

  interface: IGameAccessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getGameAdminAddresses: TypedContractMethod<[], [string[]], "view">;

  getInterfaceAddress: TypedContractMethod<[key: string], [string], "view">;

  getInterfaceAddresses: TypedContractMethod<[], [string[]], "view">;

  getItemPackNFTAddresses: TypedContractMethod<
    [worldId: BigNumberish],
    [string[]],
    "view"
  >;

  getTokenOwnerAddress: TypedContractMethod<
    [worldId: BigNumberish, tokenId: BigNumberish],
    [string],
    "view"
  >;

  getWorldAdminAddresses: TypedContractMethod<
    [worldId: BigNumberish],
    [string[]],
    "view"
  >;

  getWorldOwnerAddresses: TypedContractMethod<
    [worldId: BigNumberish],
    [string[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getGameAdminAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getInterfaceAddress"
  ): TypedContractMethod<[key: string], [string], "view">;
  getFunction(
    nameOrSignature: "getInterfaceAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getItemPackNFTAddresses"
  ): TypedContractMethod<[worldId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTokenOwnerAddress"
  ): TypedContractMethod<
    [worldId: BigNumberish, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWorldAdminAddresses"
  ): TypedContractMethod<[worldId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWorldOwnerAddresses"
  ): TypedContractMethod<[worldId: BigNumberish], [string[]], "view">;

  filters: {};
}
