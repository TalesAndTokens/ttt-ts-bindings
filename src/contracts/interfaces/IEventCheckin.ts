/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IEventCheckinInterface extends utils.Interface {
  functions: {
    "checkin(address,uint256,uint256)": FunctionFragment;
    "getCheckinCountFromPlayer(address,uint256,uint256)": FunctionFragment;
    "getEventDefinition(uint256,uint256)": FunctionFragment;
    "getLatestCheckinTimestampFromPlayer(address,uint256,uint256)": FunctionFragment;
    "validateCheckin(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkin"
      | "getCheckinCountFromPlayer"
      | "getEventDefinition"
      | "getLatestCheckinTimestampFromPlayer"
      | "validateCheckin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckinCountFromPlayer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventDefinition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestCheckinTimestampFromPlayer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCheckin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "checkin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCheckinCountFromPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestCheckinTimestampFromPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateCheckin",
    data: BytesLike
  ): Result;

  events: {
    "Checkin(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Checkin"): EventFragment;
}

export interface CheckinEventObject {
  playerWallet: string;
  worldId: BigNumber;
  eventDefinitionId: BigNumber;
  itemPackDefinitionId: BigNumber;
  itemPackId: BigNumber;
}
export type CheckinEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  CheckinEventObject
>;

export type CheckinEventFilter = TypedEventFilter<CheckinEvent>;

export interface IEventCheckin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEventCheckinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkin(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCheckinCountFromPlayer(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEventDefinition(
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    getLatestCheckinTimestampFromPlayer(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateCheckin(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;
  };

  checkin(
    playerWallet: PromiseOrValue<string>,
    worldId: PromiseOrValue<BigNumberish>,
    eventDefinitionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCheckinCountFromPlayer(
    playerWallet: PromiseOrValue<string>,
    worldId: PromiseOrValue<BigNumberish>,
    eventDefinitionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEventDefinition(
    worldId: PromiseOrValue<BigNumberish>,
    eventDefinitionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ]
  >;

  getLatestCheckinTimestampFromPlayer(
    playerWallet: PromiseOrValue<string>,
    worldId: PromiseOrValue<BigNumberish>,
    eventDefinitionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validateCheckin(
    playerWallet: PromiseOrValue<string>,
    worldId: PromiseOrValue<BigNumberish>,
    eventDefinitionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

  callStatic: {
    checkin(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCheckinCountFromPlayer(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventDefinition(
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    getLatestCheckinTimestampFromPlayer(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateCheckin(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;
  };

  filters: {
    "Checkin(address,uint256,uint256,uint256,uint256)"(
      playerWallet?: PromiseOrValue<string> | null,
      worldId?: PromiseOrValue<BigNumberish> | null,
      eventDefinitionId?: null,
      itemPackDefinitionId?: null,
      itemPackId?: null
    ): CheckinEventFilter;
    Checkin(
      playerWallet?: PromiseOrValue<string> | null,
      worldId?: PromiseOrValue<BigNumberish> | null,
      eventDefinitionId?: null,
      itemPackDefinitionId?: null,
      itemPackId?: null
    ): CheckinEventFilter;
  };

  estimateGas: {
    checkin(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCheckinCountFromPlayer(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventDefinition(
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestCheckinTimestampFromPlayer(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateCheckin(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkin(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCheckinCountFromPlayer(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventDefinition(
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestCheckinTimestampFromPlayer(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateCheckin(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      eventDefinitionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
