/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IItemDefinition {
  export type ItemDefinitionRecordStruct = {
    itemDefinitionId: PromiseOrValue<BigNumberish>;
    category: PromiseOrValue<string>;
    enable: PromiseOrValue<boolean>;
    salable: PromiseOrValue<boolean>;
    transferable: PromiseOrValue<boolean>;
    effectivePeriod: PromiseOrValue<BigNumberish>;
  };

  export type ItemDefinitionRecordStructOutput = [
    BigNumber,
    string,
    boolean,
    boolean,
    boolean,
    BigNumber
  ] & {
    itemDefinitionId: BigNumber;
    category: string;
    enable: boolean;
    salable: boolean;
    transferable: boolean;
    effectivePeriod: BigNumber;
  };
}

export interface IItemDefinitionInterface extends utils.Interface {
  functions: {
    "getDefinition(uint256)": FunctionFragment;
    "setDefinitions((uint256,string,bool,bool,bool,uint256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getDefinition" | "setDefinitions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDefinition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefinitions",
    values: [IItemDefinition.ItemDefinitionRecordStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefinitions",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IItemDefinition extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IItemDefinitionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDefinition(
      itemDefinitionId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IItemDefinition.ItemDefinitionRecordStructOutput]>;

    setDefinitions(
      records: IItemDefinition.ItemDefinitionRecordStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getDefinition(
    itemDefinitionId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IItemDefinition.ItemDefinitionRecordStructOutput>;

  setDefinitions(
    records: IItemDefinition.ItemDefinitionRecordStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getDefinition(
      itemDefinitionId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IItemDefinition.ItemDefinitionRecordStructOutput>;

    setDefinitions(
      records: IItemDefinition.ItemDefinitionRecordStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getDefinition(
      itemDefinitionId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefinitions(
      records: IItemDefinition.ItemDefinitionRecordStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDefinition(
      itemDefinitionId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefinitions(
      records: IItemDefinition.ItemDefinitionRecordStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
