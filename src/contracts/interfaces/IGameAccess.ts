/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IGameAccessInterface extends utils.Interface {
  functions: {
    "getGameAdminAddresses()": FunctionFragment;
    "getInterfaceAddress(string)": FunctionFragment;
    "getInterfaceAddresses()": FunctionFragment;
    "getItemPackNFTAddresses(uint256)": FunctionFragment;
    "getTokenOwnerAddress(uint256,uint256)": FunctionFragment;
    "getWorldAdminAddresses(uint256)": FunctionFragment;
    "getWorldOwnerAddresses(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getGameAdminAddresses"
      | "getInterfaceAddress"
      | "getInterfaceAddresses"
      | "getItemPackNFTAddresses"
      | "getTokenOwnerAddress"
      | "getWorldAdminAddresses"
      | "getWorldOwnerAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getGameAdminAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterfaceAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterfaceAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItemPackNFTAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOwnerAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldAdminAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldOwnerAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGameAdminAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterfaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterfaceAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemPackNFTAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorldAdminAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorldOwnerAddresses",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGameAccess extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGameAccessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getGameAdminAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getInterfaceAddress(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInterfaceAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getItemPackNFTAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTokenOwnerAddress(
      worldId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWorldAdminAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getWorldOwnerAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  getGameAdminAddresses(overrides?: CallOverrides): Promise<string[]>;

  getInterfaceAddress(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getInterfaceAddresses(overrides?: CallOverrides): Promise<string[]>;

  getItemPackNFTAddresses(
    worldId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTokenOwnerAddress(
    worldId: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWorldAdminAddresses(
    worldId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getWorldOwnerAddresses(
    worldId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    getGameAdminAddresses(overrides?: CallOverrides): Promise<string[]>;

    getInterfaceAddress(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInterfaceAddresses(overrides?: CallOverrides): Promise<string[]>;

    getItemPackNFTAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTokenOwnerAddress(
      worldId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWorldAdminAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getWorldOwnerAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    getGameAdminAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getInterfaceAddress(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterfaceAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getItemPackNFTAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenOwnerAddress(
      worldId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorldAdminAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorldOwnerAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getGameAdminAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterfaceAddress(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterfaceAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemPackNFTAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenOwnerAddress(
      worldId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorldAdminAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorldOwnerAddresses(
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
