/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IItemPackReveal {
  export type ItemPackRecordStruct = {
    itemPackId: PromiseOrValue<BigNumberish>;
    itemPackDefinitionId: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type ItemPackRecordStructOutput = [BigNumber, BigNumber, BigNumber] & {
    itemPackId: BigNumber;
    itemPackDefinitionId: BigNumber;
    tokenId: BigNumber;
  };
}

export interface IItemPackRevealInterface extends utils.Interface {
  functions: {
    "getItemPacks(address,uint256)": FunctionFragment;
    "getItemPacksAssociatedWithNFT(address,uint256)": FunctionFragment;
    "isRevealed(uint256,uint256)": FunctionFragment;
    "reveal(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getItemPacks"
      | "getItemPacksAssociatedWithNFT"
      | "isRevealed"
      | "reveal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getItemPacks",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemPacksAssociatedWithNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevealed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getItemPacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemPacksAssociatedWithNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRevealed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;

  events: {
    "RevealItemPack(uint256,uint256,uint256,uint256[],int64[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RevealItemPack"): EventFragment;
}

export interface RevealItemPackEventObject {
  worldId: BigNumber;
  tokenId: BigNumber;
  itemPackId: BigNumber;
  itemDefinitionIds: BigNumber[];
  amounts: BigNumber[];
}
export type RevealItemPackEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber[]],
  RevealItemPackEventObject
>;

export type RevealItemPackEventFilter = TypedEventFilter<RevealItemPackEvent>;

export interface IItemPackReveal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IItemPackRevealInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getItemPacks(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IItemPackReveal.ItemPackRecordStructOutput[]]>;

    getItemPacksAssociatedWithNFT(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IItemPackReveal.ItemPackRecordStructOutput[]]>;

    isRevealed(
      worldId: PromiseOrValue<BigNumberish>,
      itemPackId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    reveal(
      worldId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      itemPackId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getItemPacks(
    playerWallet: PromiseOrValue<string>,
    worldId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IItemPackReveal.ItemPackRecordStructOutput[]>;

  getItemPacksAssociatedWithNFT(
    playerWallet: PromiseOrValue<string>,
    worldId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IItemPackReveal.ItemPackRecordStructOutput[]>;

  isRevealed(
    worldId: PromiseOrValue<BigNumberish>,
    itemPackId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  reveal(
    worldId: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    itemPackId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getItemPacks(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IItemPackReveal.ItemPackRecordStructOutput[]>;

    getItemPacksAssociatedWithNFT(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IItemPackReveal.ItemPackRecordStructOutput[]>;

    isRevealed(
      worldId: PromiseOrValue<BigNumberish>,
      itemPackId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reveal(
      worldId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      itemPackId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RevealItemPack(uint256,uint256,uint256,uint256[],int64[])"(
      worldId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      itemPackId?: PromiseOrValue<BigNumberish> | null,
      itemDefinitionIds?: null,
      amounts?: null
    ): RevealItemPackEventFilter;
    RevealItemPack(
      worldId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      itemPackId?: PromiseOrValue<BigNumberish> | null,
      itemDefinitionIds?: null,
      amounts?: null
    ): RevealItemPackEventFilter;
  };

  estimateGas: {
    getItemPacks(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemPacksAssociatedWithNFT(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRevealed(
      worldId: PromiseOrValue<BigNumberish>,
      itemPackId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reveal(
      worldId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      itemPackId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getItemPacks(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemPacksAssociatedWithNFT(
      playerWallet: PromiseOrValue<string>,
      worldId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRevealed(
      worldId: PromiseOrValue<BigNumberish>,
      itemPackId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reveal(
      worldId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      itemPackId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
