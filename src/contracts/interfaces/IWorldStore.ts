/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IWorldStoreInterface extends utils.Interface {
  functions: {
    "getDataContract(uint256,string)": FunctionFragment;
    "getDataContractKeys()": FunctionFragment;
    "getDefinition(uint256,string)": FunctionFragment;
    "getDefinitionKeys()": FunctionFragment;
    "getTokenContract(uint256,string)": FunctionFragment;
    "getTokenContractKeys()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getDataContract"
      | "getDataContractKeys"
      | "getDefinition"
      | "getDefinitionKeys"
      | "getTokenContract"
      | "getTokenContractKeys"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDataContract",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataContractKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefinition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefinitionKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenContract",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenContractKeys",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getDataContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataContractKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefinitionKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenContractKeys",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IWorldStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWorldStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDataContract(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDataContractKeys(overrides?: CallOverrides): Promise<[string[]]>;

    getDefinition(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDefinitionKeys(overrides?: CallOverrides): Promise<[string[]]>;

    getTokenContract(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenContractKeys(overrides?: CallOverrides): Promise<[string[]]>;
  };

  getDataContract(
    worldId: PromiseOrValue<BigNumberish>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDataContractKeys(overrides?: CallOverrides): Promise<string[]>;

  getDefinition(
    worldId: PromiseOrValue<BigNumberish>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDefinitionKeys(overrides?: CallOverrides): Promise<string[]>;

  getTokenContract(
    worldId: PromiseOrValue<BigNumberish>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenContractKeys(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    getDataContract(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDataContractKeys(overrides?: CallOverrides): Promise<string[]>;

    getDefinition(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDefinitionKeys(overrides?: CallOverrides): Promise<string[]>;

    getTokenContract(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenContractKeys(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    getDataContract(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataContractKeys(overrides?: CallOverrides): Promise<BigNumber>;

    getDefinition(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefinitionKeys(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenContract(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenContractKeys(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getDataContract(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataContractKeys(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefinition(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefinitionKeys(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenContract(
      worldId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenContractKeys(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
