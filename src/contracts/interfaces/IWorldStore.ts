/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IWorldStoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getDataContract"
      | "getDataContractKeys"
      | "getDefinition"
      | "getDefinitionKeys"
      | "getTokenContract"
      | "getTokenContractKeys"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDataContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataContractKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefinition",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefinitionKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenContractKeys",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getDataContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataContractKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefinitionKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenContractKeys",
    data: BytesLike
  ): Result;
}

export interface IWorldStore extends BaseContract {
  connect(runner?: ContractRunner | null): IWorldStore;
  waitForDeployment(): Promise<this>;

  interface: IWorldStoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDataContract: TypedContractMethod<
    [worldId: BigNumberish, key: string],
    [string],
    "view"
  >;

  getDataContractKeys: TypedContractMethod<[], [string[]], "view">;

  getDefinition: TypedContractMethod<
    [worldId: BigNumberish, key: string],
    [string],
    "view"
  >;

  getDefinitionKeys: TypedContractMethod<[], [string[]], "view">;

  getTokenContract: TypedContractMethod<
    [worldId: BigNumberish, key: string],
    [string],
    "view"
  >;

  getTokenContractKeys: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDataContract"
  ): TypedContractMethod<
    [worldId: BigNumberish, key: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDataContractKeys"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDefinition"
  ): TypedContractMethod<
    [worldId: BigNumberish, key: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDefinitionKeys"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTokenContract"
  ): TypedContractMethod<
    [worldId: BigNumberish, key: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenContractKeys"
  ): TypedContractMethod<[], [string[]], "view">;

  filters: {};
}
