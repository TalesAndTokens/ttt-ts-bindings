/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IItemTransfer {
  export type TransferValidationResultStruct = {
    validWorldId: boolean;
    validTokenId: boolean;
    validTargetTokenId: boolean;
    validLength: boolean;
    validTransferables: boolean[];
    validAmounts: boolean[];
  };

  export type TransferValidationResultStructOutput = [
    validWorldId: boolean,
    validTokenId: boolean,
    validTargetTokenId: boolean,
    validLength: boolean,
    validTransferables: boolean[],
    validAmounts: boolean[]
  ] & {
    validWorldId: boolean;
    validTokenId: boolean;
    validTargetTokenId: boolean;
    validLength: boolean;
    validTransferables: boolean[];
    validAmounts: boolean[];
  };
}

export interface IItemTransferInterface extends Interface {
  getFunction(
    nameOrSignature: "transfer" | "validateTransfer"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TransferItems"): EventFragment;

  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransfer",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateTransfer",
    data: BytesLike
  ): Result;
}

export namespace TransferItemsEvent {
  export type InputTuple = [
    worldId: BigNumberish,
    tokenId: BigNumberish,
    targetTokenId: BigNumberish,
    itemDefinitionIds: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    worldId: bigint,
    tokenId: bigint,
    targetTokenId: bigint,
    itemDefinitionIds: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    worldId: bigint;
    tokenId: bigint;
    targetTokenId: bigint;
    itemDefinitionIds: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IItemTransfer extends BaseContract {
  connect(runner?: ContractRunner | null): IItemTransfer;
  waitForDeployment(): Promise<this>;

  interface: IItemTransferInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  transfer: TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      targetTokenId: BigNumberish,
      itemDefinitionIds: BigNumberish[],
      amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  validateTransfer: TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      targetTokenId: BigNumberish,
      itemDefinitionIds: BigNumberish[],
      amounts: BigNumberish[]
    ],
    [IItemTransfer.TransferValidationResultStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      targetTokenId: BigNumberish,
      itemDefinitionIds: BigNumberish[],
      amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateTransfer"
  ): TypedContractMethod<
    [
      worldId: BigNumberish,
      tokenId: BigNumberish,
      targetTokenId: BigNumberish,
      itemDefinitionIds: BigNumberish[],
      amounts: BigNumberish[]
    ],
    [IItemTransfer.TransferValidationResultStructOutput],
    "view"
  >;

  getEvent(
    key: "TransferItems"
  ): TypedContractEvent<
    TransferItemsEvent.InputTuple,
    TransferItemsEvent.OutputTuple,
    TransferItemsEvent.OutputObject
  >;

  filters: {
    "TransferItems(uint256,uint256,uint256,uint256[],int64[])": TypedContractEvent<
      TransferItemsEvent.InputTuple,
      TransferItemsEvent.OutputTuple,
      TransferItemsEvent.OutputObject
    >;
    TransferItems: TypedContractEvent<
      TransferItemsEvent.InputTuple,
      TransferItemsEvent.OutputTuple,
      TransferItemsEvent.OutputObject
    >;
  };
}
