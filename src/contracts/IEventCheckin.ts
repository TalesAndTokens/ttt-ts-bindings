/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IEventCheckinInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkin"
      | "getCheckinCount"
      | "getCheckinCountFromPlayer"
      | "getCheckinCountPerEvent"
      | "getEventDefinition"
      | "getLatestCheckinTimestampFromPlayer"
      | "validateCheckin"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Checkin"): EventFragment;

  encodeFunctionData(
    functionFragment: "checkin",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckinCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckinCountFromPlayer",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckinCountPerEvent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventDefinition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestCheckinTimestampFromPlayer",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCheckin",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "checkin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCheckinCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckinCountFromPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckinCountPerEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestCheckinTimestampFromPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateCheckin",
    data: BytesLike
  ): Result;
}

export namespace CheckinEvent {
  export type InputTuple = [
    playerWallet: AddressLike,
    worldId: BigNumberish,
    eventDefinitionId: BigNumberish,
    itemPackDefinitionId: BigNumberish,
    itemPackId: BigNumberish
  ];
  export type OutputTuple = [
    playerWallet: string,
    worldId: bigint,
    eventDefinitionId: bigint,
    itemPackDefinitionId: bigint,
    itemPackId: bigint
  ];
  export interface OutputObject {
    playerWallet: string;
    worldId: bigint;
    eventDefinitionId: bigint;
    itemPackDefinitionId: bigint;
    itemPackId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEventCheckin extends BaseContract {
  connect(runner?: ContractRunner | null): IEventCheckin;
  waitForDeployment(): Promise<this>;

  interface: IEventCheckinInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkin: TypedContractMethod<
    [
      playerWallet: AddressLike,
      worldId: BigNumberish,
      eventDefinitionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getCheckinCount: TypedContractMethod<
    [worldId: BigNumberish],
    [bigint],
    "view"
  >;

  getCheckinCountFromPlayer: TypedContractMethod<
    [
      playerWallet: AddressLike,
      worldId: BigNumberish,
      eventDefinitionId: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getCheckinCountPerEvent: TypedContractMethod<
    [worldId: BigNumberish, eventDefinitionId: BigNumberish],
    [bigint],
    "view"
  >;

  getEventDefinition: TypedContractMethod<
    [worldId: BigNumberish, eventDefinitionId: BigNumberish],
    [
      [bigint, boolean, bigint, string, bigint, bigint, bigint, bigint, boolean]
    ],
    "view"
  >;

  getLatestCheckinTimestampFromPlayer: TypedContractMethod<
    [
      playerWallet: AddressLike,
      worldId: BigNumberish,
      eventDefinitionId: BigNumberish
    ],
    [bigint],
    "view"
  >;

  validateCheckin: TypedContractMethod<
    [
      playerWallet: AddressLike,
      worldId: BigNumberish,
      eventDefinitionId: BigNumberish
    ],
    [[boolean, boolean, boolean, boolean, boolean, boolean]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkin"
  ): TypedContractMethod<
    [
      playerWallet: AddressLike,
      worldId: BigNumberish,
      eventDefinitionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCheckinCount"
  ): TypedContractMethod<[worldId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCheckinCountFromPlayer"
  ): TypedContractMethod<
    [
      playerWallet: AddressLike,
      worldId: BigNumberish,
      eventDefinitionId: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCheckinCountPerEvent"
  ): TypedContractMethod<
    [worldId: BigNumberish, eventDefinitionId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventDefinition"
  ): TypedContractMethod<
    [worldId: BigNumberish, eventDefinitionId: BigNumberish],
    [
      [bigint, boolean, bigint, string, bigint, bigint, bigint, bigint, boolean]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestCheckinTimestampFromPlayer"
  ): TypedContractMethod<
    [
      playerWallet: AddressLike,
      worldId: BigNumberish,
      eventDefinitionId: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateCheckin"
  ): TypedContractMethod<
    [
      playerWallet: AddressLike,
      worldId: BigNumberish,
      eventDefinitionId: BigNumberish
    ],
    [[boolean, boolean, boolean, boolean, boolean, boolean]],
    "view"
  >;

  getEvent(
    key: "Checkin"
  ): TypedContractEvent<
    CheckinEvent.InputTuple,
    CheckinEvent.OutputTuple,
    CheckinEvent.OutputObject
  >;

  filters: {
    "Checkin(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CheckinEvent.InputTuple,
      CheckinEvent.OutputTuple,
      CheckinEvent.OutputObject
    >;
    Checkin: TypedContractEvent<
      CheckinEvent.InputTuple,
      CheckinEvent.OutputTuple,
      CheckinEvent.OutputObject
    >;
  };
}
