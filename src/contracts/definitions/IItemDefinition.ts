/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IItemDefinition {
  export type ItemDefinitionRecordStruct = {
    itemDefinitionId: BigNumberish;
    category: string;
    enable: boolean;
    salable: boolean;
    transferable: boolean;
    effectivePeriod: BigNumberish;
  };

  export type ItemDefinitionRecordStructOutput = [
    itemDefinitionId: bigint,
    category: string,
    enable: boolean,
    salable: boolean,
    transferable: boolean,
    effectivePeriod: bigint
  ] & {
    itemDefinitionId: bigint;
    category: string;
    enable: boolean;
    salable: boolean;
    transferable: boolean;
    effectivePeriod: bigint;
  };
}

export interface IItemDefinitionInterface extends Interface {
  getFunction(
    nameOrSignature: "getDefinition" | "setDefinitions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDefinition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefinitions",
    values: [IItemDefinition.ItemDefinitionRecordStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefinitions",
    data: BytesLike
  ): Result;
}

export interface IItemDefinition extends BaseContract {
  connect(runner?: ContractRunner | null): IItemDefinition;
  waitForDeployment(): Promise<this>;

  interface: IItemDefinitionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDefinition: TypedContractMethod<
    [itemDefinitionId_: BigNumberish],
    [IItemDefinition.ItemDefinitionRecordStructOutput],
    "view"
  >;

  setDefinitions: TypedContractMethod<
    [records: IItemDefinition.ItemDefinitionRecordStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDefinition"
  ): TypedContractMethod<
    [itemDefinitionId_: BigNumberish],
    [IItemDefinition.ItemDefinitionRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setDefinitions"
  ): TypedContractMethod<
    [records: IItemDefinition.ItemDefinitionRecordStruct[]],
    [void],
    "nonpayable"
  >;

  filters: {};
}
