/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ICharacterReveal {
  export type RevealStateRecordStruct = {
    characterDefinitionId: BigNumberish;
    isRevealed: boolean;
  };

  export type RevealStateRecordStructOutput = [
    characterDefinitionId: bigint,
    isRevealed: boolean
  ] & { characterDefinitionId: bigint; isRevealed: boolean };
}

export interface ICharacterRevealInterface extends Interface {
  getFunction(nameOrSignature: "getRevealState" | "reveal"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Reveal"): EventFragment;

  encodeFunctionData(
    functionFragment: "getRevealState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRevealState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
}

export namespace RevealEvent {
  export type InputTuple = [
    worldId: BigNumberish,
    tokenId: BigNumberish,
    characterDefinitionId: BigNumberish
  ];
  export type OutputTuple = [
    worldId: bigint,
    tokenId: bigint,
    characterDefinitionId: bigint
  ];
  export interface OutputObject {
    worldId: bigint;
    tokenId: bigint;
    characterDefinitionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICharacterReveal extends BaseContract {
  connect(runner?: ContractRunner | null): ICharacterReveal;
  waitForDeployment(): Promise<this>;

  interface: ICharacterRevealInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRevealState: TypedContractMethod<
    [worldId: BigNumberish, tokenId: BigNumberish],
    [ICharacterReveal.RevealStateRecordStructOutput],
    "view"
  >;

  reveal: TypedContractMethod<
    [worldId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRevealState"
  ): TypedContractMethod<
    [worldId: BigNumberish, tokenId: BigNumberish],
    [ICharacterReveal.RevealStateRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "reveal"
  ): TypedContractMethod<
    [worldId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Reveal"
  ): TypedContractEvent<
    RevealEvent.InputTuple,
    RevealEvent.OutputTuple,
    RevealEvent.OutputObject
  >;

  filters: {
    "Reveal(uint256,uint256,uint256)": TypedContractEvent<
      RevealEvent.InputTuple,
      RevealEvent.OutputTuple,
      RevealEvent.OutputObject
    >;
    Reveal: TypedContractEvent<
      RevealEvent.InputTuple,
      RevealEvent.OutputTuple,
      RevealEvent.OutputObject
    >;
  };
}
