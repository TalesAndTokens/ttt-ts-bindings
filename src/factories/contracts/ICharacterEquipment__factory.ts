/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICharacterEquipment,
  ICharacterEquipmentInterface,
} from "../../contracts/ICharacterEquipment";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "worldId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "itemIds",
        type: "uint256[]",
      },
    ],
    name: "Equip",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "worldId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "itemDefinitionIds",
        type: "uint256[]",
      },
    ],
    name: "equip",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "worldId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getEquipments",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "worldId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "itemDefinitionIds",
        type: "uint256[]",
      },
    ],
    name: "validateEquip",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "validWorldId",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "validTokenId",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "validItemDefinitionIdLength",
            type: "bool",
          },
          {
            internalType: "bool[]",
            name: "validSlots",
            type: "bool[]",
          },
          {
            internalType: "bool[]",
            name: "validItemDefinitionIds",
            type: "bool[]",
          },
          {
            internalType: "bool[]",
            name: "equipableItems",
            type: "bool[]",
          },
          {
            internalType: "bool[]",
            name: "validItemCounts",
            type: "bool[]",
          },
        ],
        internalType: "struct ICharacterEquipment.EquipValidationResult",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ICharacterEquipment__factory {
  static readonly abi = _abi;
  static createInterface(): ICharacterEquipmentInterface {
    return new Interface(_abi) as ICharacterEquipmentInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ICharacterEquipment {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ICharacterEquipment;
  }
}
